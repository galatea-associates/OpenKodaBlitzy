/*
MIT License

Copyright (c) 2016-2023, Openkoda CDX Sp. z o.o. Sp. K. <openkoda.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package com.openkoda.model.notification;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.openkoda.model.Organization;
import com.openkoda.model.User;
import com.openkoda.model.common.*;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import java.util.List;

import static com.openkoda.model.common.ModelConstants.ORGANIZATION_ID;

/**
 * User notification entity for multi-tenant notification system supporting in-app display and email delivery.
 * <p>
 * Represents notifications shown to users across the OpenKoda platform with organization-scoped isolation
 * for multi-tenancy support. Notifications can be delivered via in-app display and integrated with
 * {@link com.openkoda.model.EmailConfig} for email delivery. Each notification is associated with
 * a specific organization and optionally a specific user for targeted delivery.
 * </p>
 * <p>
 * <b>Multi-Tenancy:</b> Notifications are organization-scoped via the {@code organizationId} field,
 * ensuring proper tenant isolation. The unique constraint on (user_id, organization_id) enforces
 * per-user-per-organization uniqueness when applicable.
 * </p>
 * <p>
 * <b>Authorization:</b> Access to notifications can be gated by the {@code requiredPrivilege} field,
 * which references privilege names from PrivilegeBase/PrivilegeNames. The authorization layer
 * enforces these checks via SecureRepository wrappers.
 * </p>
 * <p>
 * <b>Read Tracking:</b> Read/unread status is tracked via the {@link ReadNotification} relationship.
 * When a notification is deleted, all associated ReadNotification markers are automatically removed
 * via cascade delete (CascadeType.REMOVE with @OnDelete CASCADE).
 * </p>
 * <p>
 * <b>JPA Mapping:</b> Persisted to 'notification' table with columns: id, message, subject, type,
 * organization_id, user_id, required_privilege, attachment_url, propagate, hidden_from_author,
 * index_string, reference_string (computed), created_on, updated_on. Primary key generated by
 * ORGANIZATION_RELATED_ID_GENERATOR sequence with initialValue from ModelConstants and
 * allocationSize=10 for reduced database roundtrips.
 * </p>
 * <p>
 * <b>Search Integration:</b> Implements {@link SearchableEntity} interface with {@code indexString}
 * (persisted for full-text indexing) and {@code referenceString} (computed via @Formula for search
 * result identification).
 * </p>
 * <p>
 * Example usage:
 * <pre>{@code
 * Notification notification = new Notification(
 *     "Task Complete",
 *     "Your export has finished processing",
 *     NotificationType.SUCCESS,
 *     organizationId,
 *     null
 * );
 * }</pre>
 * </p>
 *
 * @author Micha≈Ç Nowak (mnowak@stratoflow.com)
 * @version 1.7.1
 * @since 1.7.1
 * @see ReadNotification
 * @see Organization
 * @see User
 * @see NotificationType
 * @see TimestampedEntity
 * @see AuditableEntity
 * @see OrganizationRelatedEntity
 * @see SearchableEntity
 */
@Entity
@Table(
        name = "notification",
        uniqueConstraints = {@UniqueConstraint(columnNames = {"user_id", ORGANIZATION_ID})}
)
public class Notification extends TimestampedEntity implements AuditableEntity, OrganizationRelatedEntity, SearchableEntity {

    public static final String REFERENCE_FORMULA = "(id)";

    /**
     * Notification severity and type classification for UI rendering and filtering.
     * <p>
     * Defines notification types that determine visual styling in the user interface
     * and enable users to filter notifications by severity. Persisted as STRING via
     * EnumType.STRING to maintain readability in the database.
     * </p>
     * <p>
     * Each type is associated with a string representation used for CSS class names
     * and UI rendering, supporting color-coded notification display:
     * <ul>
     *   <li>PRIMARY - Standard priority with primary styling</li>
     *   <li>SUCCESS - Positive outcome with green styling</li>
     *   <li>WARNING - Cautionary message with yellow/orange styling</li>
     *   <li>FAILURE - Error or failure with red styling</li>
     *   <li>INFO - Informational with neutral blue styling</li>
     *   <li>ERROR - Critical error with red styling</li>
     * </ul>
     * </p>
     *
     * @since 1.7.1
     */
    public enum NotificationType {
        /** Standard priority notification with primary styling. */
        PRIMARY("primary"),
        
        /** Positive outcome notification with success styling (green). */
        SUCCESS("success"),
        
        /** Cautionary notification requiring attention (yellow/orange). */
        WARNING("warning"),
        
        /** Error or failure notification with error styling (red). */
        FAILURE("failure"),
        
        /** Informational notification with neutral styling (blue). */
        INFO("info"),
        
        /** Critical error notification with error styling (red). */
        ERROR("error");
        
        private String type;

        /**
         * Constructs NotificationType with string representation.
         *
         * @param type the string representation used in UI and CSS classes
         */
        NotificationType(String type) {
            this.type = type;
        }

        /**
         * Returns the string type representation for UI rendering.
         *
         * @return the string type value (e.g., "primary", "success", "warning")
         */
        public String getType() {
            return type;
        }
    }

    /**
     * Primary key generated by ORGANIZATION_RELATED_ID_GENERATOR sequence.
     * <p>
     * Uses sequence with initialValue from ModelConstants.INITIAL_ORGANIZATION_RELATED_VALUE
     * and allocationSize=10 for performance optimization (reduces database roundtrips).
     * Value is null before entity persistence.
     * </p>
     */
    @Id
    @SequenceGenerator(name = ORGANIZATION_RELATED_ID_GENERATOR, sequenceName = ORGANIZATION_RELATED_ID_GENERATOR, initialValue = ModelConstants.INITIAL_ORGANIZATION_RELATED_VALUE, allocationSize = 10)
    @GeneratedValue(generator = ORGANIZATION_RELATED_ID_GENERATOR, strategy = GenerationType.SEQUENCE)
    private Long id;

    /**
     * Notification body content displayed to the user.
     * <p>
     * Stored in TEXT column (length=65535) to support long messages. Content may include
     * HTML markup for rich text formatting in the user interface. This field is required
     * for meaningful notification display.
     * </p>
     */
    @Column(length = 65535)
    private String message;

    /**
     * Optional notification subject or title displayed as header.
     * <p>
     * When present, displayed prominently above the message body in notification UI.
     * Null value indicates a subject-less notification where only the message is shown.
     * </p>
     */
    @Column
    private String subject;

    /**
     * Notification severity classification determining UI styling and user filtering.
     * <p>
     * Persisted as STRING via EnumType.STRING for database readability. Non-nullable
     * field annotated with @NotNull ensures every notification has a defined type.
     * Controls visual appearance through CSS classes and enables severity-based filtering.
     * </p>
     *
     * @see NotificationType
     */
    @Column
    @Enumerated(EnumType.STRING)
    @NotNull
    private NotificationType type;

    /**
     * Lazy-loaded association to Organization entity for object graph traversal.
     * <p>
     * Marked with @JsonIgnore to prevent serialization in JSON responses. The join
     * column is configured as insertable=false and updatable=false, making the
     * {@code organizationId} field the authoritative source for the foreign key value.
     * This prevents accidental updates via the association.
     * </p>
     *
     * @see Organization
     */
    @JsonIgnore
    @ManyToOne(optional = false, fetch=FetchType.LAZY)
    @JoinColumn(insertable = false, updatable = false, name = ORGANIZATION_ID)
    private Organization organization;
    
    /**
     * Immutable organization identifier for multi-tenant notification scoping.
     * <p>
     * Raw foreign key column marked as updatable=false to prevent modification after
     * creation. Enables organization-scoped queries and multi-tenant isolation without
     * triggering proxy initialization. Null value indicates a global notification
     * visible across all organizations.
     * </p>
     */
    @Column(updatable = false, name = ORGANIZATION_ID)
    private Long organizationId;

    /**
     * Lazy-loaded association to User entity for user-targeted notifications.
     * <p>
     * Marked with @JsonIgnore to prevent JSON serialization. Join column configured
     * as insertable=false and updatable=false, making {@code userId} the authoritative
     * foreign key field. Enables navigation to User entity when needed without N+1 queries.
     * </p>
     *
     * @see User
     */
    @JsonIgnore
    @ManyToOne(optional = false, fetch=FetchType.LAZY)
    @JoinColumn(insertable = false, updatable = false, name = "user_id")
    private User user;
    
    /**
     * Immutable user identifier for targeted notification delivery.
     * <p>
     * Raw foreign key column marked as updatable=false. Enables per-user notification
     * queries without proxy initialization overhead. Null value indicates the notification
     * is not targeted to a specific user (e.g., organization-wide notification).
     * </p>
     */
    @Column(updatable = false, name = "user_id")
    private Long userId;

    /**
     * Authorization gate referencing privilege name required to view notification.
     * <p>
     * References privilege names from PrivilegeBase/PrivilegeNames constants. When set,
     * only users possessing this privilege can view the notification. Null value means
     * no privilege requirement - notification is visible to all authorized users within
     * the organization scope. Checked by SecureRepository wrappers during queries.
     * </p>
     *
     * @see com.openkoda.model.PrivilegeBase
     */
    @Column(name = "required_privilege")
    private String requiredPrivilege;

    /**
     * Collection of read markers tracking which users have read this notification.
     * <p>
     * Lazy-loaded OneToMany relationship with cascade delete configured. When a notification
     * is deleted, CascadeType.REMOVE combined with @OnDelete CASCADE ensures automatic
     * cleanup of all associated ReadNotification records. Enables read/unread tracking
     * per user without manual deletion management.
     * </p>
     *
     * @see ReadNotification
     */
    @OneToMany(mappedBy = "notification", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private List<ReadNotification> readNotifications;

    /**
     * Optional URL to attached file, document, or external resource.
     * <p>
     * Stored in TEXT column (length=65535) to accommodate long URLs. Supports linking
     * notifications to files, documents, or external resources for additional context.
     * Null value indicates no attachment is associated with the notification.
     * </p>
     */
    @Column(length = 65535)
    private String attachmentURL;

    /**
     * Flag to enable notification propagation to integrated external services.
     * <p>
     * When set to true, triggers notification delivery to integrated services such as
     * Trello, Slack, email, and other configured notification channels. Default value
     * is false (no external propagation). Used by notification service to determine
     * multi-channel delivery requirements.
     * </p>
     */
    @Column(columnDefinition = "boolean default false")
    private boolean propagate;

    /**
     * Flag to hide notification from the creating user.
     * <p>
     * When set to true, the notification is not displayed to the user who triggered its
     * creation. Default value is false (visible to all users including author). Useful
     * for system-generated notifications that should only be visible to other users
     * (e.g., "User X submitted a form" visible to admins but not to User X).
     * </p>
     */
    @Column(columnDefinition = "boolean default false")
    private boolean hiddenFromAuthor;

    /**
     * Default no-argument constructor required by JPA.
     * <p>
     * Used by Hibernate for entity instantiation during loading from database.
     * Application code should use parameterized constructors for creating new notifications.
     * </p>
     */
    public Notification() {
    }

    /**
     * Creates a global notification visible across all organizations.
     * <p>
     * Constructs a notification without organization or user scope, making it visible
     * globally subject to privilege restrictions. Use this constructor for system-wide
     * announcements or alerts not tied to specific tenants.
     * </p>
     *
     * @param message the notification body content, may contain HTML markup
     * @param type the {@link NotificationType} severity classification for UI styling
     * @param requiredPrivilege the privilege name required to view notification, or null for unrestricted access
     */
    public Notification(String message, NotificationType type, String requiredPrivilege) {
        this.message = message;
        this.type = type;
        this.requiredPrivilege = requiredPrivilege;
    }

    /**
     * Creates an organization-scoped notification with custom subject line.
     * <p>
     * Constructs a notification scoped to a specific organization with an optional subject.
     * The notification will only be visible to users within the specified organization
     * (subject to privilege checks). Delegates to the full constructor with propagate
     * and hiddenFromAuthor flags set to false.
     * </p>
     *
     * @param subject the notification title or header displayed prominently in UI
     * @param message the notification body content, may contain HTML markup
     * @param type the {@link NotificationType} severity classification
     * @param organizationId the organization ID for multi-tenant scoping
     * @param requiredPrivilege the privilege name required to view, or null for organization-wide visibility
     */
    public Notification(String subject, String message, NotificationType type, Long organizationId, String requiredPrivilege) {
        this(subject, message, type, organizationId, requiredPrivilege, false, false);
    }

    /**
     * Creates a fully-configured organization-scoped notification with all options.
     * <p>
     * Complete constructor allowing configuration of all notification properties including
     * external service propagation and author visibility. Use this constructor when you
     * need fine-grained control over notification behavior.
     * </p>
     *
     * @param subject the notification title or header, or null for subject-less notification
     * @param message the notification body content, may contain HTML markup
     * @param type the {@link NotificationType} severity classification
     * @param organizationId the organization ID for multi-tenant scoping
     * @param requiredPrivilege the privilege name required to view, or null for unrestricted within organization
     * @param propagate true to push notification to integrated external services (Trello, Slack, email)
     * @param hiddenFromAuthor true to hide notification from the creating user
     */
    public Notification(String subject, String message, NotificationType type, Long organizationId, String requiredPrivilege, boolean propagate, boolean hiddenFromAuthor) {
        this.subject = subject;
        this.message = message;
        this.type = type;
        this.organizationId = organizationId;
        this.requiredPrivilege = requiredPrivilege;
        this.propagate = propagate;
        this.hiddenFromAuthor = hiddenFromAuthor;
    }

    /**
     * Creates an organization-scoped notification without custom subject.
     * <p>
     * Constructs a notification scoped to a specific organization without a subject line.
     * Only the message body will be displayed. The notification is visible to users within
     * the organization subject to privilege restrictions.
     * </p>
     *
     * @param message the notification body content, may contain HTML markup
     * @param type the {@link NotificationType} severity classification
     * @param organizationId the organization ID for multi-tenant scoping
     * @param requiredPrivilege the privilege name required to view, or null for organization-wide visibility
     */
    public Notification(String message, NotificationType type, Long organizationId, String requiredPrivilege) {
        this.message = message;
        this.type = type;
        this.organizationId = organizationId;
        this.requiredPrivilege = requiredPrivilege;
    }

    /**
     * Creates a user-targeted notification for specific user delivery.
     * <p>
     * Constructs a notification targeted to a specific user identified by userId.
     * Use this constructor for user-specific notifications that should only appear
     * in the target user's notification list (subject to privilege checks).
     * </p>
     *
     * @param message the notification body content, may contain HTML markup
     * @param type the {@link NotificationType} severity classification
     * @param requiredPrivilege the privilege name required to view, or null for unrestricted user access
     * @param userId the target user ID for user-specific notification delivery
     */
    public Notification(String message, NotificationType type, String requiredPrivilege, Long userId) {
        this.message = message;
        this.type = type;
        this.userId = userId;
        this.requiredPrivilege = requiredPrivilege;
    }

    /**
     * Returns the notification body content displayed to the user.
     * <p>
     * Message may contain HTML markup for rich text formatting in the UI.
     * This is the primary content of the notification.
     * </p>
     *
     * @return the message content, or null if not set
     */
    public String getMessage() {
        return message;
    }

    /**
     * Sets the notification message body content.
     * <p>
     * Supports HTML content for rich text display. Use this method to update
     * the notification message after construction or during modification.
     * </p>
     *
     * @param message the notification body content to set
     */
    public void setMessage(String message) {
        this.message = message;
    }


    /**
     * Returns the optional notification subject or title.
     * <p>
     * Subject is displayed prominently as a header above the message body.
     * Null return value indicates a subject-less notification.
     * </p>
     *
     * @return the subject line, or null for notifications without subjects
     */
    public String getSubject() {
        return subject;
    }

    /**
     * Returns the notification severity classification for UI styling.
     * <p>
     * Type determines the visual appearance in the UI through CSS classes and
     * enables users to filter notifications by severity level.
     * </p>
     *
     * @return the {@link NotificationType} (PRIMARY, SUCCESS, WARNING, FAILURE, INFO, ERROR), never null for persisted entities
     */
    public NotificationType getType() {
        return type;
    }

    /**
     * Returns the lazy-loaded Organization entity for object graph traversal.
     * <p>
     * Accessing this property may trigger a database query if the association is not
     * already loaded. Use {@link #getOrganizationId()} for ID-only access to avoid
     * proxy initialization overhead.
     * </p>
     *
     * @return the {@link Organization} this notification is scoped to, or null if not loaded or global notification
     */
    public Organization getOrganization() {
        return organization;
    }

    /**
     * Returns the lazy-loaded User entity for user-targeted notifications.
     * <p>
     * Accessing this property may trigger a database query if not already loaded.
     * Use {@link #getUserId()} for ID-only access without proxy initialization.
     * </p>
     *
     * @return the target {@link User}, or null if not loaded or not user-specific
     */
    public User getUser() {
        return user;
    }

    /**
     * Returns the immutable user identifier without triggering proxy initialization.
     * <p>
     * Safe for ID-only access, avoiding the overhead of loading the User entity.
     * Null value indicates the notification is not targeted to a specific user.
     * </p>
     *
     * @return the user ID foreign key, or null for non-user-targeted notifications
     */
    public Long getUserId() {
        return userId;
    }

    /**
     * Returns the privilege name required to view this notification.
     * <p>
     * References privilege names from PrivilegeBase/PrivilegeNames constants.
     * The authorization layer checks this value via SecureRepository wrappers.
     * Null return value means no privilege restriction.
     * </p>
     *
     * @return the privilege name string, or null for unrestricted notifications
     */
    public String getRequiredPrivilege() {
        return requiredPrivilege;
    }

    /**
     * Returns the collection of read markers tracking notification read status.
     * <p>
     * Each ReadNotification entity represents one user reading this notification.
     * The collection is lazy-loaded and may trigger a database query on first access.
     * Returns empty list if no users have read the notification or if not loaded.
     * </p>
     *
     * @return list of {@link ReadNotification} entities, empty if not loaded or no reads recorded
     */
    public List<ReadNotification> getReadNotifications() {
        return readNotifications;
    }

    /**
     * Provides concise audit representation for audit trail logging.
     * <p>
     * Returns a minimal string containing the notification ID for tracking changes
     * in the audit subsystem. Implements the {@link AuditableEntity} interface contract.
     * </p>
     *
     * @return audit string containing notification ID in format "ID: {id}"
     */
    @Override
    public String toAuditString() {
        return "ID: "+id;
    }

    /**
     * Returns the organization identifier for multi-tenant scoping queries.
     * <p>
     * Implements {@link OrganizationRelatedEntity} interface to enable organization-scoped
     * repository operations. Provides direct access to the foreign key without triggering
     * proxy initialization. Null return value indicates a global notification.
     * </p>
     *
     * @return the organization ID foreign key, or null for global notifications not scoped to any organization
     */
    @Override
    public Long getOrganizationId() {
        return organizationId;
    }

    /**
     * Computed reference string field using Hibernate @Formula annotation.
     * <p>
     * Value computed from SQL expression defined in REFERENCE_FORMULA constant (currently "(id)").
     * Avoids application-side concatenation and ensures consistency with database state.
     * Used by {@link SearchableEntity} interface for search result identification.
     * </p>
     */
    @Formula(REFERENCE_FORMULA)
    private String referenceString;
    
    /**
     * Returns the computed reference string for search indexing identification.
     * <p>
     * Computed via Hibernate @Formula using SQL expression from REFERENCE_FORMULA.
     * Implements {@link SearchableEntity} interface contract for search result identification.
     * Value is automatically computed by the database on entity load.
     * </p>
     *
     * @return the computed reference identifier based on notification ID
     */
    @Override
    public String getReferenceString() {
        return referenceString;
    }

    /**
     * Persisted index string field for full-text search integration.
     * <p>
     * Stored in database column for search indexer consumption. Updated by the search
     * subsystem to enable full-text search across notification content.
     * </p>
     */
    @Column(name = INDEX_STRING_COLUMN, length = INDEX_STRING_COLUMN_LENGTH)
    private String indexString;
    
    /**
     * Returns the persisted index string for full-text search integration.
     * <p>
     * Implements {@link SearchableEntity} interface contract. This value feeds full-text
     * search indexers and is maintained by the search subsystem. Null value indicates
     * the notification has not yet been indexed.
     * </p>
     *
     * @return the index string content for search, or null if not yet indexed
     */
    @Override
    public String getIndexString() {
        return indexString;
    }

    /**
     * Returns the primary key generated by sequence.
     * <p>
     * Value is null for transient entities before persistence. After saving to database,
     * contains the unique identifier generated by ORGANIZATION_RELATED_ID_GENERATOR sequence.
     * </p>
     *
     * @return the notification ID, or null if entity has not been persisted
     */
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Returns the optional attachment or resource URL.
     * <p>
     * URL may point to files, documents, or external resources providing additional
     * context for the notification. Null return value indicates no attachment.
     * </p>
     *
     * @return the attachment URL, or null if no attachment is associated
     */
    public String getAttachmentURL() {
        return attachmentURL;
    }

    /**
     * Sets the URL to an attached file, document, or external resource.
     * <p>
     * Use this method to associate a file or external resource with the notification
     * for additional context or supporting documentation.
     * </p>
     *
     * @param attachmentURL the URL string pointing to the attachment resource
     */
    public void setAttachmentURL(String attachmentURL) {
        this.attachmentURL = attachmentURL;
    }

    /**
     * Returns whether notification should be pushed to external integrations.
     * <p>
     * When true, the notification service will deliver this notification to configured
     * external services such as Trello, Slack, email systems, and other integrated channels.
     * Default value is false (in-app only).
     * </p>
     *
     * @return true if notification propagates to integrated external services, false for in-app only
     */
    public boolean isPropagate() {
        return propagate;
    }

    /**
     * Sets the external service propagation flag.
     * <p>
     * Set to true to enable multi-channel delivery to integrated external services.
     * Set to false to restrict notification to in-app display only.
     * </p>
     *
     * @param propagate true to enable external delivery, false for in-app only
     */
    public void setPropagate(boolean propagate) {
        this.propagate = propagate;
    }

    /**
     * Returns whether notification is hidden from the creating user.
     * <p>
     * When true, the user who triggered notification creation will not see the notification
     * in their notification list. Useful for system-generated notifications about user actions
     * that should only be visible to other users (e.g., admins, team members).
     * </p>
     *
     * @return true if notification is hidden from the author, false if visible to all including author
     */
    public boolean isHiddenFromAuthor() {
        return hiddenFromAuthor;
    }

    /**
     * Sets the author visibility flag.
     * <p>
     * Set to true to hide the notification from the creating user. Set to false to
     * make it visible to all users including the author (subject to privilege checks).
     * </p>
     *
     * @param hiddenFromAuthor true to hide from creating user, false to show to all
     */
    public void setHiddenFromAuthor(boolean hiddenFromAuthor) {
        this.hiddenFromAuthor = hiddenFromAuthor;
    }
}
