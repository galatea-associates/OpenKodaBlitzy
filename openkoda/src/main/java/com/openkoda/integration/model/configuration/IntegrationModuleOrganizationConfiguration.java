/*
MIT License

Copyright (c) 2016-2023, Openkoda CDX Sp. z o.o. Sp. K. <openkoda.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package com.openkoda.integration.model.configuration;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.openkoda.model.Organization;
import com.openkoda.model.common.ModelConstants;
import com.openkoda.model.common.OrganizationRelatedEntity;
import jakarta.persistence.*;
import org.hibernate.annotations.Formula;

import static com.openkoda.model.common.ModelConstants.*;

/**
 * Per-organization integration configuration entity persisted to database.
 * <p>
 * Stores OAuth tokens, API keys, and service-specific settings for Trello, GitHub, Jira, 
 * Basecamp, MS Teams, and Slack integrations. This JPA entity provides tenant-scoped 
 * configuration management using the organizationId foreign key for multi-tenancy isolation.
 * </p>
 * <p>
 * The entity uses the ORGANIZATION_RELATED_ID_GENERATOR sequence with allocationSize=10 
 * for primary key generation. The Organization association is marked with @JsonIgnore and 
 * uses a non-insertable/non-updatable @JoinColumn, making organizationId the authoritative 
 * foreign key. A computed referenceString field is generated via @Formula annotation using 
 * DEFAULT_ORGANIZATION_RELATED_REFERENCE_FIELD_FORMULA for read-only reference display.
 * </p>
 * <p>
 * Entity lifecycle is managed by JPA, with persistence occurring during transactional commits 
 * and querying performed through Spring Data repositories. The organizationId column provides 
 * tenant scoping, ensuring configuration data remains isolated between organizations in the 
 * multi-tenant architecture.
 * </p>
 * <p>
 * Security Note: Sensitive credentials (OAuth tokens, API keys, webhook URLs) are stored as 
 * plain strings without in-class encryption. Encryption at rest is strongly recommended at 
 * the database or infrastructure level to protect these values.
 * </p>
 *
 * @author OpenKoda Team
 * @version 1.7.1
 * @since 1.7.1
 * @see com.openkoda.model.Organization
 * @see com.openkoda.model.common.OrganizationRelatedEntity
 */
@Entity
public class IntegrationModuleOrganizationConfiguration implements OrganizationRelatedEntity {

    /**
     * Default constructor for JPA entity instantiation.
     * <p>
     * Required by JPA specification for entity proxy creation and reflection-based instantiation.
     * </p>
     */
    public IntegrationModuleOrganizationConfiguration() {
    }

    /**
     * Creates configuration entity for the specified organization.
     * <p>
     * Initializes the integration configuration with tenant scope by setting the organizationId.
     * All integration settings (tokens, API keys, service configurations) remain uninitialized
     * and should be set via setter methods.
     * </p>
     *
     * @param organizationId the organization foreign key providing tenant scope for this configuration
     */
    public IntegrationModuleOrganizationConfiguration(Long organizationId) {
        this.organizationId = organizationId;
    }

    /**
     * Primary key generated by ORGANIZATION_RELATED_ID_GENERATOR sequence with allocationSize=10.
     * <p>
     * Uses sequence-based generation strategy for efficient batch allocation. The allocationSize 
     * of 10 reduces database round-trips by pre-allocating 10 IDs per access.
     * </p>
     */
    @Id
    @SequenceGenerator(name = ORGANIZATION_RELATED_ID_GENERATOR, sequenceName = ORGANIZATION_RELATED_ID_GENERATOR, initialValue = ModelConstants.INITIAL_ORGANIZATION_RELATED_VALUE, allocationSize = 10)
    @GeneratedValue(generator = ORGANIZATION_RELATED_ID_GENERATOR, strategy = GenerationType.SEQUENCE)
    private Long id;

    /**
     * Organization association marked @JsonIgnore, non-insertable/non-updatable.
     * <p>
     * The organizationId field is the authoritative foreign key. This association is excluded 
     * from JSON serialization to prevent circular references and is read-only to maintain data 
     * integrity through the organizationId column.
     * </p>
     */
    @JsonIgnore
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(nullable = true, insertable = false, updatable = false, name = ORGANIZATION_ID)
    private Organization organization;
    
    /**
     * Foreign key to Organization table, provides tenant scope for configuration.
     * <p>
     * This column establishes the multi-tenant relationship, ensuring integration configuration 
     * remains isolated per organization. Nullable to support optional organization assignment.
     * </p>
     */
    @Column(nullable = true, name = ORGANIZATION_ID)
    private Long organizationId;

    /**
     * Computed reference string via @Formula (DEFAULT_ORGANIZATION_RELATED_REFERENCE_FIELD_FORMULA), read-only.
     * <p>
     * Generated by database formula for display and reference purposes. This field is not 
     * persisted directly but calculated at query time based on the formula expression.
     * </p>
     */
    @Formula(DEFAULT_ORGANIZATION_RELATED_REFERENCE_FIELD_FORMULA)
    private String referenceString;

    //        Trello
    /**
     * Trello API token for authentication (sensitive credential, requires encryption).
     * <p>
     * Used to authenticate Trello API requests. This token grants access to the user's 
     * Trello account and should be protected. Store encrypted at rest to prevent unauthorized access.
     * </p>
     */
    public String trelloApiToken;
    
    /**
     * Trello API key for Trello integration.
     * <p>
     * Application-level API key identifying the OpenKoda application to Trello services. 
     * Used in conjunction with trelloApiToken for authenticated API requests.
     * </p>
     */
    public String trelloApiKey;
    
    /**
     * Target Trello board name for integration operations.
     * <p>
     * Specifies which Trello board to use for creating cards and managing integration tasks. 
     * Must match an existing board accessible with the configured API credentials.
     * </p>
     */
    public String trelloBoardName;
    
    /**
     * Target Trello list name within board.
     * <p>
     * Identifies the specific list within the Trello board where integration-created cards 
     * will be placed. Must match an existing list in the configured board.
     * </p>
     */
    public String trelloListName;
    
    //        GitHub
    /**
     * GitHub personal access token or OAuth token (sensitive credential).
     * <p>
     * Authenticates GitHub API requests with appropriate scopes for repository operations. 
     * This token grants access to the user's GitHub resources and must be encrypted at rest.
     * </p>
     */
    public String gitHubToken;
    
    /**
     * Target GitHub repository name for integration.
     * <p>
     * Specifies the repository name (without owner prefix) where integration operations will 
     * be performed, such as issue creation or pull request management.
     * </p>
     */
    public String gitHubRepoName;
    
    /**
     * GitHub repository owner username or organization.
     * <p>
     * Identifies the owner of the target repository, used to construct the full repository 
     * path (owner/repo) for API requests.
     * </p>
     */
    public String gitHubRepoOwner;

    //        Basecamp
    /**
     * Basecamp OAuth access token (sensitive credential).
     * <p>
     * Short-lived OAuth token authenticating Basecamp API requests. Should be refreshed using 
     * basecampRefreshToken when expired. Requires encryption at rest for security.
     * </p>
     */
    public String basecampAccessToken;
    
    /**
     * Basecamp OAuth refresh token for token renewal (sensitive credential).
     * <p>
     * Long-lived token used to obtain new access tokens when they expire. Critical for 
     * maintaining persistent integration access and must be encrypted at rest.
     * </p>
     */
    public String basecampRefreshToken;
    
    /**
     * Basecamp account ID for API requests.
     * <p>
     * Identifies the Basecamp account context for API operations. Required for constructing 
     * Basecamp API endpoints in the format: api.basecamp.com/{accountId}/...
     * </p>
     */
    public String basecampAccountId;
    
    /**
     * Target Basecamp project ID.
     * <p>
     * Specifies which Basecamp project to use for integration operations such as creating 
     * to-do items or accessing project resources.
     * </p>
     */
    public String basecampProjectId;
    
    /**
     * Target Basecamp to-do list ID within project.
     * <p>
     * Identifies the specific to-do list where integration-created tasks will be added. 
     * Must exist within the configured Basecamp project.
     * </p>
     */
    public String basecampToDoListId;
    
    /**
     * Direct URL to Basecamp to-do list.
     * <p>
     * Provides a web browser-accessible link to the configured to-do list for quick navigation. 
     * Useful for user reference and direct access to integrated content.
     * </p>
     */
    public String basecampToDoListUrl;

    //        JIRA
    /**
     * Jira OAuth access token (sensitive credential).
     * <p>
     * Authenticates Jira API requests for issue creation, queries, and project management. 
     * Short-lived token that requires periodic refresh. Must be encrypted at rest.
     * </p>
     */
    public String jiraToken;
    
    /**
     * Jira OAuth refresh token for token renewal (sensitive credential).
     * <p>
     * Long-lived token used to obtain new access tokens when they expire. Essential for 
     * maintaining continuous integration connectivity and requires encryption at rest.
     * </p>
     */
    public String jiraRefreshToken;
    
    /**
     * Jira organization/site name.
     * <p>
     * Identifies the Jira Cloud instance or organization. Used to construct API endpoint URLs 
     * in the format: {organizationName}.atlassian.net
     * </p>
     */
    public String jiraOrganizationName;
    
    /**
     * Target Jira project name or key.
     * <p>
     * Specifies which Jira project to use for integration operations such as issue creation. 
     * Can be either the project key (e.g., "PROJ") or full project name.
     * </p>
     */
    public String jiraProjectName;

    //        Slack
    /**
     * Slack incoming webhook URL for notifications (sensitive credential).
     * <p>
     * Complete webhook URL used to send messages to a Slack channel. Format: 
     * https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXX. Treat as sensitive 
     * as it allows posting to the configured channel.
     * </p>
     */
    public String slackWebhookUrl;

    //        Ms Teams
    /**
     * Microsoft Teams incoming webhook URL for notifications (sensitive credential).
     * <p>
     * Complete webhook URL for posting messages to a Teams channel. Format: 
     * https://outlook.office.com/webhook/... Enables message posting to the configured 
     * channel and should be protected.
     * </p>
     */
    public String msTeamsWebhookUrl;

    //        Email
    /**
     * Email address for integration-related communications.
     * <p>
     * Contact email for notifications, alerts, or integration-related correspondence. May be 
     * used for fallback notifications when other integration channels are unavailable.
     * </p>
     */
    public String email;

    /**
     * Returns the Trello API key for Trello integration.
     *
     * @return the application-level Trello API key, or null if not configured
     */
    public String getTrelloApiKey() {
        return trelloApiKey;
    }

    /**
     * Sets the Trello API key for Trello integration.
     *
     * @param trelloApiKey the application-level Trello API key to configure
     */
    public void setTrelloApiKey(String trelloApiKey) {
        this.trelloApiKey = trelloApiKey;
    }

    /**
     * Returns the Trello API token for authentication.
     *
     * @return the Trello user authentication token, or null if not configured
     */
    public String getTrelloApiToken() {
        return trelloApiToken;
    }

    /**
     * Sets the Trello API token for authentication.
     *
     * @param trelloApiToken the Trello user authentication token (sensitive credential)
     */
    public void setTrelloApiToken(String trelloApiToken) {
        this.trelloApiToken = trelloApiToken;
    }

    /**
     * Returns the target Trello board name for integration operations.
     *
     * @return the Trello board name, or null if not configured
     */
    public String getTrelloBoardName() {
        return trelloBoardName;
    }

    /**
     * Sets the target Trello board name for integration operations.
     *
     * @param trelloBoardName the name of the Trello board to use for integration
     */
    public void setTrelloBoardName(String trelloBoardName) {
        this.trelloBoardName = trelloBoardName;
    }

    /**
     * Returns the target Trello list name within board.
     *
     * @return the Trello list name, or null if not configured
     */
    public String getTrelloListName() {
        return trelloListName;
    }

    /**
     * Sets the target Trello list name within board.
     *
     * @param trelloListName the name of the Trello list where cards will be created
     */
    public void setTrelloListName(String trelloListName) {
        this.trelloListName = trelloListName;
    }

    /**
     * Returns the GitHub personal access token or OAuth token.
     *
     * @return the GitHub authentication token, or null if not configured
     */
    public String getGitHubToken() {
        return gitHubToken;
    }

    /**
     * Sets the GitHub personal access token or OAuth token.
     *
     * @param gitHubToken the GitHub authentication token (sensitive credential)
     */
    public void setGitHubToken(String gitHubToken) {
        this.gitHubToken = gitHubToken;
    }

    /**
     * Returns the target GitHub repository name for integration.
     *
     * @return the GitHub repository name, or null if not configured
     */
    public String getGitHubRepoName() {
        return gitHubRepoName;
    }

    /**
     * Sets the target GitHub repository name for integration.
     *
     * @param gitHubRepoName the name of the GitHub repository for integration operations
     */
    public void setGitHubRepoName(String gitHubRepoName) {
        this.gitHubRepoName = gitHubRepoName;
    }

    /**
     * Returns the GitHub repository owner username or organization.
     *
     * @return the GitHub repository owner, or null if not configured
     */
    public String getGitHubRepoOwner() {
        return gitHubRepoOwner;
    }

    /**
     * Sets the GitHub repository owner username or organization.
     *
     * @param gitHubRepoOwner the owner of the target GitHub repository
     */
    public void setGitHubRepoOwner(String gitHubRepoOwner) {
        this.gitHubRepoOwner = gitHubRepoOwner;
    }

    /**
     * Returns the Slack incoming webhook URL for notifications.
     *
     * @return the Slack webhook URL, or null if not configured
     */
    public String getSlackWebhookUrl() {
        return slackWebhookUrl;
    }

    /**
     * Sets the Slack incoming webhook URL for notifications.
     *
     * @param slackWebhookUrl the complete Slack webhook URL (sensitive credential)
     */
    public void setSlackWebhookUrl(String slackWebhookUrl) {
        this.slackWebhookUrl = slackWebhookUrl;
    }

    /**
     * Returns the Microsoft Teams incoming webhook URL for notifications.
     *
     * @return the MS Teams webhook URL, or null if not configured
     */
    public String getMsTeamsWebhookUrl() {
        return msTeamsWebhookUrl;
    }

    /**
     * Sets the Microsoft Teams incoming webhook URL for notifications.
     *
     * @param msTeamsWebhookUrl the complete MS Teams webhook URL (sensitive credential)
     */
    public void setMsTeamsWebhookUrl(String msTeamsWebhookUrl) {
        this.msTeamsWebhookUrl = msTeamsWebhookUrl;
    }

    /**
     * Returns the email address for integration-related communications.
     *
     * @return the email address, or null if not configured
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email address for integration-related communications.
     *
     * @param email the email address for notifications and integration correspondence
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Returns the Jira OAuth access token.
     *
     * @return the Jira access token, or null if not configured
     */
    public String getJiraToken() {
        return jiraToken;
    }

    /**
     * Sets the Jira OAuth access token.
     *
     * @param jiraToken the Jira OAuth access token (sensitive credential)
     */
    public void setJiraToken(String jiraToken) {
        this.jiraToken = jiraToken;
    }

    /**
     * Returns the Jira OAuth refresh token for token renewal.
     *
     * @return the Jira refresh token, or null if not configured
     */
    public String getJiraRefreshToken() {
        return jiraRefreshToken;
    }

    /**
     * Sets the Jira OAuth refresh token for token renewal.
     *
     * @param jiraRefreshToken the Jira OAuth refresh token (sensitive credential)
     */
    public void setJiraRefreshToken(String jiraRefreshToken) {
        this.jiraRefreshToken = jiraRefreshToken;
    }

    /**
     * Returns the Jira organization/site name.
     *
     * @return the Jira organization name, or null if not configured
     */
    public String getJiraOrganizationName() {
        return jiraOrganizationName;
    }

    /**
     * Sets the Jira organization/site name.
     *
     * @param jiraOrganizationName the Jira organization or site name
     */
    public void setJiraOrganizationName(String jiraOrganizationName) {
        this.jiraOrganizationName = jiraOrganizationName;
    }

    /**
     * Returns the target Jira project name or key.
     *
     * @return the Jira project name or key, or null if not configured
     */
    public String getJiraProjectName() {
        return jiraProjectName;
    }

    /**
     * Sets the target Jira project name or key.
     *
     * @param jiraProjectName the Jira project name or key for integration operations
     */
    public void setJiraProjectName(String jiraProjectName) {
        this.jiraProjectName = jiraProjectName;
    }

    /**
     * Returns the Basecamp account ID for API requests.
     *
     * @return the Basecamp account ID, or null if not configured
     */
    public String getBasecampAccountId() {
        return basecampAccountId;
    }

    /**
     * Sets the Basecamp account ID for API requests.
     *
     * @param basecampAccountId the Basecamp account ID used in API endpoint construction
     */
    public void setBasecampAccountId(String basecampAccountId) {
        this.basecampAccountId = basecampAccountId;
    }

    /**
     * Returns the Basecamp OAuth access token.
     *
     * @return the Basecamp access token, or null if not configured
     */
    public String getBasecampAccessToken() {
        return basecampAccessToken;
    }

    /**
     * Sets the Basecamp OAuth access token.
     *
     * @param basecampAccessToken the Basecamp OAuth access token (sensitive credential)
     */
    public void setBasecampAccessToken(String basecampAccessToken) {
        this.basecampAccessToken = basecampAccessToken;
    }

    /**
     * Returns the Basecamp OAuth refresh token for token renewal.
     *
     * @return the Basecamp refresh token, or null if not configured
     */
    public String getBasecampRefreshToken() {
        return basecampRefreshToken;
    }

    /**
     * Sets the Basecamp OAuth refresh token for token renewal.
     *
     * @param basecampRefreshToken the Basecamp OAuth refresh token (sensitive credential)
     */
    public void setBasecampRefreshToken(String basecampRefreshToken) {
        this.basecampRefreshToken = basecampRefreshToken;
    }

    /**
     * Returns the target Basecamp project ID.
     *
     * @return the Basecamp project ID, or null if not configured
     */
    public String getBasecampProjectId() {
        return basecampProjectId;
    }

    /**
     * Sets the target Basecamp project ID.
     *
     * @param basecampProjectId the Basecamp project ID for integration operations
     */
    public void setBasecampProjectId(String basecampProjectId) {
        this.basecampProjectId = basecampProjectId;
    }

    /**
     * Returns the target Basecamp to-do list ID within project.
     *
     * @return the Basecamp to-do list ID, or null if not configured
     */
    public String getBasecampToDoListId() {
        return basecampToDoListId;
    }

    /**
     * Sets the target Basecamp to-do list ID within project.
     *
     * @param basecampToDoListId the Basecamp to-do list ID where tasks will be created
     */
    public void setBasecampToDoListId(String basecampToDoListId) {
        this.basecampToDoListId = basecampToDoListId;
    }

    /**
     * Returns the direct URL to Basecamp to-do list.
     *
     * @return the Basecamp to-do list URL, or null if not configured
     */
    public String getBasecampToDoListUrl() {
        return basecampToDoListUrl;
    }

    /**
     * Sets the direct URL to Basecamp to-do list.
     *
     * @param basecampToDoListUrl the web browser-accessible link to the Basecamp to-do list
     */
    public void setBasecampToDoListUrl(String basecampToDoListUrl) {
        this.basecampToDoListUrl = basecampToDoListUrl;
    }

    /**
     * Returns the computed reference string from @Formula annotation.
     * <p>
     * This value is calculated by the database using the DEFAULT_ORGANIZATION_RELATED_REFERENCE_FIELD_FORMULA 
     * and is read-only. Used for display and reference purposes in the application.
     * </p>
     *
     * @return the computed reference string, or null if not yet persisted
     */
    @Override
    public String getReferenceString() {
        return referenceString;
    }

    /**
     * Returns the organization foreign key providing tenant scope.
     * <p>
     * This ID establishes the multi-tenant relationship and ensures configuration isolation 
     * between organizations. Required for proper tenant-scoped data access.
     * </p>
     *
     * @return the organization ID, or null if not associated with an organization
     */
    @Override
    public Long getOrganizationId() {
        return organizationId;
    }

    /**
     * Returns the primary key value.
     * <p>
     * Generated by the ORGANIZATION_RELATED_ID_GENERATOR sequence with allocationSize=10 
     * for efficient batch ID allocation.
     * </p>
     *
     * @return the primary key ID, or null if not yet persisted
     */
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Returns the associated Organization entity.
     * <p>
     * This association is marked @JsonIgnore and non-insertable/non-updatable. The organizationId 
     * field is the authoritative foreign key.
     * </p>
     *
     * @return the associated Organization, or null if not loaded
     */
    public Organization getOrganization() {
        return organization;
    }

    /**
     * Sets the associated Organization entity.
     * <p>
     * Note: This is a read-only association. Changes to this field do not update the database. 
     * Use setOrganizationId() to modify the organization relationship.
     * </p>
     *
     * @param organization the Organization entity to associate
     */
    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    /**
     * Sets the organization foreign key providing tenant scope.
     * <p>
     * This establishes or changes the organization relationship and tenant scope for this 
     * configuration entity.
     * </p>
     *
     * @param organizationId the organization ID to associate this configuration with
     */
    public void setOrganizationId(Long organizationId) {
        this.organizationId = organizationId;
    }
}
