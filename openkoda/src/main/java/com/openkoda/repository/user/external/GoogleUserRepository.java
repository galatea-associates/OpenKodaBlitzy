/*
MIT License

Copyright (c) 2016-2023, Openkoda CDX Sp. z o.o. Sp. K. <openkoda.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package com.openkoda.repository.user.external;

import com.openkoda.core.security.HasSecurityRules;
import com.openkoda.model.authentication.GoogleUser;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Repository;

@Repository
/**
 * Repository managing GoogleUser entities for Google Sign-In integration.
 * <p>
 * This repository provides CRUD operations and privilege-protected queries for Google OAuth user mappings.
 * It enables the OpenKoda application to integrate with Google authentication by persisting the relationship
 * between external Google user identifiers and internal User entities.
 * </p>
 * <p>
 * OAuth Flow: External Google authentication → token exchange → {@code findByGoogleId} lookup → 
 * link/create User entity. This repository is queried during the OAuth callback to determine if a 
 * Google user has previously authenticated with the system.
 * </p>
 * <p>
 * Persistence: GoogleUser entities are persisted to the 'google_user' table with columns for the internal
 * user ID and the external Google identifier.
 * </p>
 * <p>
 * Security: Methods enforce {@code CHECK_CAN_READ_GOOGLE_USER} privilege via Spring Security's 
 * {@code @PreAuthorize} annotation. Unauthorized access attempts throw {@code AccessDeniedException}.
 * </p>
 * <p>
 * Usage Context: This repository is used by Google OAuth callback controllers to perform account linking
 * and authentication. It enables users to sign in with their Google accounts while maintaining the 
 * connection to internal OpenKoda user records.
 * </p>
 * <p>
 * Thread-Safety: This repository is a thread-safe Spring-managed singleton that can be safely injected
 * and used concurrently across multiple requests.
 * </p>
 *
 * @author Arkadiusz Drysch (adrysch@stratoflow.com)
 * @version 1.7.1
 * @since 1.7.1
 * @see GoogleUser
 * @see HasSecurityRules
 */
public interface GoogleUserRepository extends JpaRepository<GoogleUser, Long>, HasSecurityRules {

    /**
     * Retrieves a GoogleUser entity by its Google user identifier from OAuth response.
     * <p>
     * This method performs a privilege-protected lookup using the Google user ID obtained during
     * the OAuth authentication flow. The query is automatically generated by Spring Data based on
     * the method name pattern. Access is restricted via {@code @PreAuthorize} to users with the
     * {@code CHECK_CAN_READ_GOOGLE_USER} privilege.
     * </p>
     * <p>
     * Spring Data Query Derivation: This method follows the Spring Data naming convention
     * {@code findBy<PropertyName>} and automatically generates a query that selects from the
     * google_user table where the googleId column matches the provided parameter.
     * </p>
     * <p>
     * Thread-Safety: This method is thread-safe and can be invoked concurrently by multiple threads.
     * The underlying repository implementation handles synchronization and transaction management.
     * </p>
     *
     * @param googleId Google user identifier from the OAuth response, must not be null
     * @return GoogleUser entity with matching Google ID, or null if no matching user is found
     * @throws org.springframework.security.access.AccessDeniedException if the current user lacks
     *         the CHECK_CAN_READ_GOOGLE_USER privilege required to read Google user records
     * @see GoogleUser
     * @see org.springframework.security.access.prepost.PreAuthorize
     */
    @PreAuthorize(CHECK_CAN_READ_GOOGLE_USER)
    GoogleUser findByGoogleId(String googleId);
}
