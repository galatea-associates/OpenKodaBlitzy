/*
MIT License

Copyright (c) 2016-2023, Openkoda CDX Sp. z o.o. Sp. K. <openkoda.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package com.openkoda.repository.user.external;

import com.openkoda.core.security.HasSecurityRules;
import com.openkoda.model.authentication.LDAPUser;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.security.access.prepost.PreAuthorize;

/**
 * Repository managing LDAPUser entities for LDAP/Active Directory integration.
 * <p>
 * Provides CRUD operations and privilege-protected queries for LDAP-backed user mappings.
 * This repository handles the persistence layer for users authenticated via LDAP directory
 * servers, enabling integration with corporate directory services such as Active Directory,
 * OpenLDAP, or other LDAP-compliant systems.
 * </p>
 * <p>
 * <b>Authentication Flow:</b><br>
 * LDAP directory server authentication → uid lookup → findByUid → link/create User entity
 * </p>
 * <p>
 * <b>Persistence:</b><br>
 * Persists to {@code ldap_user} table in the database, mapping LDAP directory entries
 * to local user entities.
 * </p>
 * <p>
 * <b>Security:</b><br>
 * Method-level {@code @PreAuthorize} annotations enforce {@code CHECK_CAN_READ_LDAP_USER}
 * privilege via Spring Security. Access to LDAP user data requires appropriate privileges.
 * </p>
 * <p>
 * <b>Usage Context:</b><br>
 * Used by LDAP authentication provider for directory-based authentication and user management.
 * The repository is typically injected into authentication services that handle LDAP login flows.
 * </p>
 *
 * @author Martyna Litkowska (mlitkowska@stratoflow.com)
 * @version 1.7.1
 * @since 2019-02-11
 * @see LDAPUser
 * @see HasSecurityRules
 */
public interface LDAPUserRepository extends JpaRepository<LDAPUser, Long>, HasSecurityRules {

    /**
     * Finds an LDAP user by their unique identifier from the directory server.
     * <p>
     * This method performs a privilege-protected lookup using the LDAP uid (user identifier)
     * from the directory server. Access is controlled via {@code @PreAuthorize} annotation
     * requiring {@code CHECK_CAN_READ_LDAP_USER} privilege.
     * </p>
     * <p>
     * The query is automatically generated by Spring Data JPA based on the method name pattern,
     * translating to: {@code SELECT * FROM ldap_user WHERE uid = ?}
     * </p>
     * <p>
     * <b>Thread-Safety:</b> This repository is a thread-safe Spring-managed singleton.
     * </p>
     *
     * @param uid LDAP uid (user identifier) from directory server, must not be null
     * @return LDAPUser entity with matching uid, or {@code null} if not found
     * @throws org.springframework.security.access.AccessDeniedException if the current user
     *         lacks {@code CHECK_CAN_READ_LDAP_USER} privilege
     * @see LDAPUser
     * @see PreAuthorize
     */
    @PreAuthorize(CHECK_CAN_READ_LDAP_USER)
    LDAPUser findByUid(String uid);

}
